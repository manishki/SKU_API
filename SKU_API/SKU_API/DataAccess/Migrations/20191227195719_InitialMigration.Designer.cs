// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SKU_API.DataAccess;

namespace SKU_API.Migrations
{
    [DbContext(typeof(SkuDbContext))]
    [Migration("20191227195719_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("SKU_API.DataAccess.Entities.Catrgory", b =>
                {
                    b.Property<Guid>("CatrgoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("CatrgoryId");

                    b.ToTable("Catrgories");
                });

            modelBuilder.Entity("SKU_API.DataAccess.Entities.CatrgorySubCatrgory", b =>
                {
                    b.Property<Guid>("CatrgoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubCatrgoryId")
                        .HasColumnType("uuid");

                    b.HasKey("CatrgoryId", "SubCatrgoryId");

                    b.HasIndex("SubCatrgoryId");

                    b.ToTable("CatrgorySubCatrgory");
                });

            modelBuilder.Entity("SKU_API.DataAccess.Entities.Department", b =>
                {
                    b.Property<Guid>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("SKU_API.DataAccess.Entities.DepartmentCategory", b =>
                {
                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CatrgoryId")
                        .HasColumnType("uuid");

                    b.HasKey("DepartmentId", "CategoryId");

                    b.HasIndex("CatrgoryId");

                    b.ToTable("DepartmentCategory");
                });

            modelBuilder.Entity("SKU_API.DataAccess.Entities.Location", b =>
                {
                    b.Property<Guid>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("SKU_API.DataAccess.Entities.LocationDepartment", b =>
                {
                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.HasKey("LocationId", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("LocationDepartment");
                });

            modelBuilder.Entity("SKU_API.DataAccess.Entities.SubCatrgory", b =>
                {
                    b.Property<Guid>("SubCatrgoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("SubCatrgoryId");

                    b.ToTable("SubCatrgories");
                });

            modelBuilder.Entity("SKU_API.DataAccess.Entities.CatrgorySubCatrgory", b =>
                {
                    b.HasOne("SKU_API.DataAccess.Entities.Catrgory", "Catrgory")
                        .WithMany("CatrgorySubCatrgories")
                        .HasForeignKey("CatrgoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SKU_API.DataAccess.Entities.SubCatrgory", "SubCatrgory")
                        .WithMany("CatrgorySubCatrgories")
                        .HasForeignKey("SubCatrgoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SKU_API.DataAccess.Entities.DepartmentCategory", b =>
                {
                    b.HasOne("SKU_API.DataAccess.Entities.Catrgory", "Catrgory")
                        .WithMany("DepartmentCategories")
                        .HasForeignKey("CatrgoryId");

                    b.HasOne("SKU_API.DataAccess.Entities.Department", "Department")
                        .WithMany("DepartmentCategories")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SKU_API.DataAccess.Entities.LocationDepartment", b =>
                {
                    b.HasOne("SKU_API.DataAccess.Entities.Department", "Department")
                        .WithMany("LocationDepartments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SKU_API.DataAccess.Entities.Location", "Location")
                        .WithMany("LocationDepartments")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
